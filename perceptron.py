# -*- coding: utf-8 -*-
"""perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12eG_Ct_6WoFwNF6qlH-GBoB3eRK0ILf1
"""

import numpy as np
import random
import sys


or_gate = [
    [(1, 1), 1],
    [(1, 0), 1],
    [(0, 1), 1],
    [(0, 0), 0]
]

def activation_function(x):
    if x > 0:
        return 1
    elif x < 0:
        return -1

def run_perceptron(gate):
    bias = (1,) 
    learning_constant = 0.1
    n = 50

    weights = []

    for i in range(3):
        weights.append(random.uniform(-1, 1))

    for i in range(n):
        inputs, expected_output = random.choice(gate)
        inputs = inputs + bias
        weighted_sum = np.dot(inputs, weights)
        guess = activation_function(weighted_sum)
        error = expected_output - guess
        weights += learning_constant * error * np.asarray(inputs) 


    inputs, expected_output = random.choice(gate)
    inputs = inputs + bias
    weighted_sum = np.dot(inputs, weights)
    print(weighted_sum)

tests = 2

for i in range(tests):
    run_perceptron(or_gate)